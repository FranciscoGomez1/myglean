  function! CopyAndCreate()
      " Save current cursor position
      "let save_cursor = getpos('.')
  
      " Visual mode to select text
      normal! gv
  
      " delete the selected text
      normal d
  
      " Save file
      execute ":w"
  
      " Copy selected text to register
      let @r = @"
      let g:text = @r
  
      " Open file explorer
      Explore
  
      " Save current window and buffer
      let g:current_window = winnr()
      let g:current_buffer = bufnr('%')
  
      " Define autocmd to run after file is opened
      augroup CopyAndCreateAutocmd
          autocmd!
          autocmd BufWinEnter * if bufnr('%') !=# g:current_buffer && bufname('%') != '' | call Write(text) | endif
      augroup END
  
      " Restore cursor position
      " call setpos('.', save_cursor)
  
      " Go back to original window
      execute g:current_window . 'wincmd w'
  endfunction

function Write(text)
    let current_filename = expand('%:t')
    let file_name = Clean_file_name(current_filename) 
    echom  a:text
    echom "Current filename: " . current_filename
    echom "Current name: " . file_name
    call append(line('$'), ["const " . file_name . " = ({}) => {", "  //the selected text?"])
    call cursor('$', 4)
    execute 'normal! "rp'
    call append(line('$'), ["}", "export default " . file_name])
  endfunction

" Clean the file name to drop the file extension
  function Clean_file_name(current_filename)
    let newString = ""
    for character in a:current_filename
       if character !=# '.'
         let newString .=character
       else
         break
       endif
    endfor
    return newString
  endfunction
  
  " Map a key to call the function
  nnoremap <leader>n :call CopyAndCreate()<CR>
  
  " Map a key to call the function nnoremap <leader>n :call CopyAndCreate()<CR>
  
  function! PasteSelectedText(selected_text)
      " Paste the copied text
      call setline(1, split(a:selected_text, "\n"))
  endfunction

